---
title: Simple Random Candidate Selection 
abbrev: Candidate Selection
docname: draft-hoffman-random-candidate-selection-01

stand_alone: true
v: 3

ipr: trust200902
kw: Internet-Draft
cat: info
submissionType: IETF

author:
 -
   ins: P. Hoffman
   name: Paul Hoffman
   org: ICANN
   email: paul.hoffman@icann.org

normative:
  SHA-2: RFC6234
  Unicode:
    title: The Unicode Standard (latest version)
    author:
      org: The Unicode Consortium
    target: https://www.unicode.org/versions/latest/
  UTF-8: RFC3629

informative:
  I-D.thomson-elegy-vrs:

--- abstract

This document describes a process to randomly select a subset of named candidates from a larger set of candidates.
The process uses an unpredictable value that can be trusted by all candidates.

This draft has a [GitHub repository](https://github.com/paulehoffman/draft-hoffman-random-candidate-selection).
Issues and pull requests can be made there.

<!-- TO DO

-->

--- middle

# Introduction

It is common to need to pick a subset of people from a larger group using a random selection method.
This is often done on an ad hoc basis, but for some selections, a more formal process is needed,
particularly if the people in the larger group don't all trust the administrator of the selection process to be unbiased.

This document gives a simple, understandable process that can be done for groups and subsets of arbitrary size.
The process is purposely transparent and reproducible.
It works with any group of entities that have names: people, companies, locations, and so on.

As a simple example, a future leadership committee will have a fixed size.
The members of the committee will be selected from a large pool of volunteers. 
Someone is in charge of collecting the names of the volunteers and making a randomized selection among them for the leadership committee.
They can use the process in this document to make that selection in a way that is both provably random and understandable.

Due to the formatting used in this document, the reader is encouraged to read the HTML version, although the text version is still usable.

See {{I-D.thomson-elegy-vrs}} for a similar method as described here.

# Overview of the Process

A few terms are used throughout this document:

ceremony:
: The act of collecting names into a pool, making a random selection from the pool, and publishing the entire process in a clear and transparent method.

ceremony administrator (CA):
: The person who performs the steps of the ceremony.

candidate:
: A person, organization, or other namable entity that is possibly being selected during the ceremony.

candidate name:
: The name used by each candidate in the pool.
The candidate name is expressed as a string of Unicode characters in UTF-8 format {{Unicode}} {{UTF-8}}.

difficult-to-predict string (_D_):
: A publicly-visible string that is only known after the pool of candidates has been closed. 
(Note that this is different from what is normally called a "random number" or a "random string".
True random numbers or strings are designed to be nearly impossible to predict, whereas _D_ in this process has weak but sufficient randomness.)

selection size (_S_):
: The number of candidates that will be selected from the pool.

## Basic Steps

The steps in a ceremony that follows this process is given here.
See {{specifics}} for more detail on the steps.

1. The CA starts the ceremony by performing the following steps at the same time:

   - Announces an end date for when the pool will be complete.
   - Announces a later date on which _D_, the difficult-to-predict string, will be selected.
   - Announces the source where _D_ will be found on that later date.
   - Announces _S_, the number of candidates that will be selected.
   - Opens up the pool of candidates for submission.

1. Candidates submit their names to the pool until the closing date, and the CA puts the allowed names in the pool.

1. On the closing date, the CA publishes the candidate names from the pool with the hexadecimal value of the UTF-8 encoding for each candidate name.

1. On the date for selecting _D_, the CA gets _D_ from the announced source.

1. The CA calculates the hashes used to make the selection.
The CA concatenates each candidate name with _D_ (name first, then _D_), uses the SHA-256 hash function {{SHA-2}} on the resulting string, and records the value of the hash as a UTF-8 string.

1. The CA arranges the set of hash values in alphabetic order from highest to lowest.
They then select the _S_ candidates from the top of the list (that is, the names whose hash values are largest).

# Specifics for the Process  {#specifics}

## Start of Ceremony

Much of the trust in the selection process is based on the CA not being able to influence the selection.
If the CA can choose, or even influence, the value of _D_, they can help establish the outcome of the selection.
Similarly, if one or more of the candidates can influence the value of _D_, they can increase their chance of being selected.

To make the process trustworthy, the value of _D_ must be unrelated to the CA or the candidates, and it must be selected only after the list of candidates is completed.
The most important things for a ceremony is that the source is announced before the ceremony starts, that all participants and viewers of a ceremony can find the source on the date specified by the CA, that all candidates believe that no candidate can influence _D_ on that date, and that everyone gets the same value when they go to the source for that date.

### Use of the FTSE 100 Index

The process described in this document uses the closing value for the FTSE 100 Index on the particular day selected by the CA.
The FTSE 100 Index is a long-established index based on 100 stocks; it is sometimes known by its stock ticker as "UKX".
A common open source of those values is the Wall Street Journal.
The daily closing for the FTSE 100 Index at the Wall Street Journal can currently be found [here](https://www.wsj.com/market-data/quotes/index/UK/UKX/historical-prices).

Note that the location for sources of daily closing values can change over time.
The CA must check that the intended source is still active, and still available when the ceremony starts.

Values from the FTSE 100 Index in this procedure are always encoded as four digits, followed by a period character (U+002E), followed by two more digits, such as:

~~~
7623.10
~~~

If the FTSE 100 Index ever goes above 10,000, the encoded values would be five digits, followed by a period character (U+002E), followed by two more digits.

### Other Public Sources of Randomness

Although the procedure in this document uses the FTSE 100 Index as a public source of randomness, there are many other sources that can be used by a CA, as long as the source chosen is trusted by the candidates.
There are many other stock indexes with enough stocks in them to make prediction of the exact value have less than a 0.1% chance.
Having said that, using a future price of a single stock is probably not a good public source of randomness because candidates are likely to trust the variability of that less than the variability of a basket of stocks.

Some systems that use public sources of randomness use the results of an unrelated lottery, such as the type of lotteries that many countries hold.
These are probably trusted by candidates not be able to be manipulated.
However, lotteries normally are a set of numbers between 1 and 100, often five or more such numbers.
If the CA uses such a lottery for this procedure, they need to specify how the numbers from the lottery of the chosen date will be combined, including whether or not the numbers from 1 to 9 need to be preceded by a "0" character.

There are other public sources of randomness, such as cameras pointed at lava lamps and so on.
These are probably not good choices for the type of ceremony described in this document because the operators of such sources are not publicly trusted entities.

Note that some sources of randomness may have less randomness than it appears at first glance.
There can be hidden biases towards certain values that are not obvious when looking at a small set of recent values.
If a CA chooses a source for _D_ other than the FTSE 100 Index, the data from source should be measured over a long period of time for unexpected biases toward values that a candidate can use to improve their chance of being selected.

## Name Submission and Pool Creation

The CA is the sole arbitrator for whether a candidate is allowed to enter the pool.
The CA is also the sole arbitrator of what name string (in UTF-8) the candidate can use in the pool.

The order that the candidates join the pool does not affect the outcome of the selection process.
Said another way, the pool is kept as an unordered set of candidates, not an ordered list of candidates.

It is a good practice for the CA to have consistent rules for the names, such as only using ASCII space characters (U+0020), only one space between each name part, no trailing spaces, and so on.
These rules can be more difficult when the candidates are company names (such as whether the legal standing of the company such as "Inc." is included), but making consistent rules is not that difficult.

## Closing Submissions to the Pool

At the closing of submissions, the CA verifies that the number of candidates in the pool is larger than _S_. 
If the length is the same as _S_, the rest of the steps are unneeded (and could be confusing), because all candidates will automatically be selected.
If the length is shorter than _S_, the ceremony stops because there are too few candidates.

The method for publishing the set of candidates is determined by the CA.
{{namedisplay}} gives an example of how a CA might publish this information.

## Selecting _D_

On the day that the CA announced for the selection of _D_, the CA goes the the source they announced and gets _D_.
After the CA retrieves _D_ from the announced source, they encode _D_ as a UTF-8 string.
In the example of the FTSE 100 Index, a closing value for the day announced at the beginning of the ceremony might be "7623.10".
This would be encoded in UTF-8 as the string of characters whose hex value is 0x373632332e3130.

## Calculating Hashes

Different programming libraries have different requirements for the input to hash functions.
{{sample-code}} uses the built-in `hashlib` library in Python, which requires that text strings have a specified encoding.

## Selecting _S_ Candidates

The process of selecting is simply taking the _S_ candidates whose hash value is highest.
This can easily be determined by sorting the text representation of the hash values in descending order because in UTF-8 and ASCII, digits have lower codepoints than letters.

To complete the process in a transparent manner, the CA should publish all known data for the ceremony.
This includes _S_, _D_, the hexadecimal value of _D_, all of the information for each candidate, and the full list of selected candidates.
{{namelist-out}} shows an example of what this publication might look like.


# Handling Ceremony Process Issues

Ceremonies don't always go as planned.
For example, after a ceremony completes, one or more of the selected candidates might be removed from the selected set due to voluntary withdrawal or established rules (such as no two candidates being from the same geographic region).
In such cases, no new ceremony is needed: the CA simply selects the next candidate(s) on the list that is ordered by hash values.

Similarly, if after the selection process is completed, the size _S_ of the selected set needs to increase, the CA simply selects the next candidate(s) on the list that is ordered by hash values.


# Performing a Weighted Selection

In some selections, the CA wants to give candidates a weighted chance of being selected.
For example, a legislature might select its leadership randomly, but weights the chance of being selected by the size of the membership of the political party in the legislature.
The CA can create the pool with multiple names for each party, giving each name a number.

For example, assume a legislature has 27 members of the Orange party, 20 members of the Yellow party, and 7 members of the Green party.
The CA could create a pool consisting of the names "Orange1", "Orange2", ... "Orange27", "Yellow1", "Yellow2", ... "Yellow20", "Green1", "Green2", ... "Green7".
The selected party would be the one whose name appears in the first name of the list of hashes.


# IANA Considerations

This document has no IANA considerations.


# Security Considerations

The value _D_ used in this process is explicitly not cryptographically strong; in fact, it might provide only a few bits of randomness.
The FTSE 100 Index might be predictable after the third digit from the right, but not the last three digits, meaning that they only have randomness of about 10 bits.
The value of _D_ is concatenated into each candidate string before the whole string is hashed, so incorrectly predicting even one character of _D_ completely changes the value of the hash for comparison.

Because of this, a candidate who has a lot of leeway in choosing their name can possibly increase their chance of being selected by as much as 0.1% with such source of randomness.
The procedure in this document assumes that candidates have very little leeway in choosing their names; the CA must accept each name before it is put into the pool.
The combination of the limited leeway for choosing the names in the pool and the necessity to predict _D_ exactly in order to gain any benefit means that _D_ needs much less randomness that a random number that would be used during encryption or authentication.

--- back

# Sample Code {#sample-code}

The following is a list of figures for an implementation of the procedure shown in this document.

- The Python script in {{the-program}} implements the algorithm from this document.
- The file that contains the list of names is shown in {{namelist}}. (The names are the winners of the Nobel laureates in Literature for 2016 through 2021.)
- A file showing the UTF-8 representation of the names from {{namelist}} is shown in {{namedisplay}}. This file is suitable for showing to the candidates.
- The file that contains the _S_ and _D_ on separate lines is shown in {{selectioninfo}}.
- {{namelist-out}} shows the result of running the program with that file as input.

~~~
{::include ./candidate-selection.py}
~~~
{: #the-program title="Example Python code for this procedure" }

~~~
{::include ./namelist}
~~~
{: #namelist title="Sample name list file" }

~~~
{::include ./namedisplay.out}
~~~
{: #namedisplay title="Full information for the names" }

~~~
{::include ./selectioninfo}
~~~
{: #selectioninfo title="Sample selection information file" }

~~~
{::include ./selection.out}
~~~
{: #namelist-out title="Output of running the program on the list of names and selection information" }


